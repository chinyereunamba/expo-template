// Zustand store type definitions
import { ThemeMode } from './theme';
import { User } from './user';

// Root state interface (will be generated by store configuration)
export interface RootState {
  auth: AuthState;
  app: AppState;
  api: any; // RTK Query API state
}

// Auth slice state
export interface AuthState {
  user: User | null;
  token: string | null;
  refreshToken: string | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  lastLoginAt: string | null;
}

// App slice state
export interface AppState {
  theme: ThemeMode;
  isFirstLaunch: boolean;
  notifications: NotificationSettings;
  isOnline: boolean;
  appVersion: string;
  buildNumber: string;
  lastUpdated: string | null;
  settings: AppSettings;
}

// Notification settings
export interface NotificationSettings {
  enabled: boolean;
  token?: string;
  categories: {
    general: boolean;
    security: boolean;
    marketing: boolean;
    updates: boolean;
  };
  schedule: {
    startTime: string; // HH:mm format
    endTime: string; // HH:mm format
    timezone: string;
  };
}

// App settings
export interface AppSettings {
  language: string;
  region: string;
  currency: string;
  dateFormat: 'DD/MM/YYYY' | 'MM/DD/YYYY' | 'YYYY-MM-DD';
  timeFormat: '12h' | '24h';
  biometricEnabled: boolean;
  autoLockTimeout: number; // in minutes
  crashReporting: boolean;
  analytics: boolean;
}

// Action payload types for common actions
export interface LoginPayload {
  user: User;
  token: string;
  refreshToken: string;
}

export interface UpdateUserPayload extends Partial<User> {}

export interface SetNotificationPayload extends Partial<NotificationSettings> {}

export interface SetAppSettingsPayload extends Partial<AppSettings> {}

// Async thunk states
export interface AsyncThunkState {
  loading: boolean;
  error: string | null;
  lastFetch: string | null;
}

// Generic async state for features
export interface AsyncState<T> extends AsyncThunkState {
  data: T | null;
}

// List state for paginated data
export interface ListState<T> extends AsyncThunkState {
  items: T[];
  pagination: {
    page: number;
    limit: number;
    total: number;
    hasMore: boolean;
  };
  filters: Record<string, any>;
  sortBy: string;
  sortOrder: 'asc' | 'desc';
}

// Form state for complex forms
export interface FormState<T> {
  data: Partial<T>;
  errors: Record<keyof T, string>;
  touched: Record<keyof T, boolean>;
  isSubmitting: boolean;
  isValid: boolean;
  isDirty: boolean;
}

// Selector types
export type AppSelector<T> = (state: RootState) => T;
export type AuthSelector<T> = (state: RootState) => T;

// Middleware types
export interface MiddlewareAPI {
  dispatch: any;
  getState: () => RootState;
}

export interface Action<T = any> {
  type: string;
  payload?: T;
  meta?: any;
  error?: boolean;
}

// Store enhancer types
export interface StoreEnhancer {
  (next: any): any;
}

// Persist configuration
export interface PersistConfig {
  key: string;
  storage: any;
  whitelist?: string[];
  blacklist?: string[];
  transforms?: any[];
  migrate?: (state: any, version: number) => any;
  version?: number;
}
