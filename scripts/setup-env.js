#!/usr/bin/env node

/**
 * Environment Setup Script
 * Helps developers set up their environment configuration
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function question(prompt) {
  return new Promise(resolve => {
    rl.question(prompt, resolve);
  });
}

async function setupEnvironment() {
  console.log('üöÄ Expo Mobile Skeleton - Environment Setup');
  console.log('==========================================\n');

  // Check if .env already exists
  const envPath = path.join(process.cwd(), '.env');
  if (fs.existsSync(envPath)) {
    const overwrite = await question(
      '‚ö†Ô∏è  .env file already exists. Overwrite? (y/N): '
    );
    if (overwrite.toLowerCase() !== 'y') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('Please provide the following configuration values:\n');

  // Collect configuration
  const config = {};

  config.API_URL =
    (await question('API URL (default: https://api-dev.example.com): ')) ||
    'https://api-dev.example.com';
  config.API_VERSION = (await question('API Version (default: v1): ')) || 'v1';
  config.DEBUG_MODE = await question('Enable debug mode? (Y/n): ');
  config.DEBUG_MODE =
    config.DEBUG_MODE.toLowerCase() !== 'n' ? 'true' : 'false';

  console.log('\nOptional configuration (press Enter to skip):');
  config.ANALYTICS_ID = (await question('Analytics ID: ')) || '';
  config.SENTRY_DSN = (await question('Sentry DSN: ')) || '';
  config.EAS_PROJECT_ID =
    (await question('EAS Project ID: ')) || 'your-project-id-here';

  // Generate .env file
  const envContent = `# Environment variables for development
# Generated by setup script on ${new Date().toISOString()}

# API Configuration
EXPO_PUBLIC_API_URL=${config.API_URL}
EXPO_PUBLIC_API_VERSION=${config.API_VERSION}

# App Configuration
EXPO_PUBLIC_APP_ENV=development
EXPO_PUBLIC_DEBUG_MODE=${config.DEBUG_MODE}

# Analytics (optional)
${config.ANALYTICS_ID ? `EXPO_PUBLIC_ANALYTICS_ID=${config.ANALYTICS_ID}` : '# EXPO_PUBLIC_ANALYTICS_ID=your-analytics-id'}

# Sentry (optional)
${config.SENTRY_DSN ? `EXPO_PUBLIC_SENTRY_DSN=${config.SENTRY_DSN}` : '# EXPO_PUBLIC_SENTRY_DSN=your-sentry-dsn'}

# EAS Project Configuration
EXPO_PUBLIC_EAS_PROJECT_ID=${config.EAS_PROJECT_ID}
`;

  fs.writeFileSync(envPath, envContent);

  console.log('\n‚úÖ Environment configuration created successfully!');
  console.log('\nNext steps:');
  console.log('1. Review and update .env file if needed');
  console.log(
    '2. Set up staging and production environments (.env.staging, .env.production)'
  );
  console.log(
    '3. Run "npm run config:validate development" to verify configuration'
  );
  console.log('4. Start development with "npm start"');

  rl.close();
}

function showHelp() {
  console.log('Environment Setup Script');
  console.log('');
  console.log('Usage:');
  console.log('  node scripts/setup-env.js        - Interactive setup');
  console.log('  node scripts/setup-env.js help   - Show this help');
  console.log('');
  console.log('This script will help you create a .env file with the required');
  console.log('environment variables for the Expo Mobile Skeleton app.');
}

async function main() {
  const args = process.argv.slice(2);

  if (args.includes('help') || args.includes('-h') || args.includes('--help')) {
    showHelp();
    return;
  }

  try {
    await setupEnvironment();
  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}
